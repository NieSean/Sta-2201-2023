---
title: "EDA and data visualization"
author: "Monica Alexander"
date: today
date-format: "DD/MM/YY"
format: 
    pdf:
      toc: true
      number-sections: true
---

```{r setup, include=FALSE}
# knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE)
```

```{r, echo=FALSE}
#| message: false
library(opendatatoronto)
library(tidyverse)
library(stringr)
library(skimr) # EDA
library(visdat) # EDA
library(janitor)
library(lubridate)
library(ggrepel)
```

```{r, echo=FALSE, include=FALSE}
# -----------------------------------------------------------------------
# Code from the lecture that had modified delay_2022 is kept here
# -----------------------------------------------------------------------

all_data <- list_packages(limit = 500)

res <- list_package_resources("996cfe8d-fb35-40ce-b569-698d51fc683b") # obtained code from searching data frame above
res <- res |> mutate(year = str_extract(name, "202.?"))
delay_2022_ids <- res |> filter(year==2022) |> select(id) |> pull()

delay_2022 <- get_resource(delay_2022_ids)

# make the column names nicer to work with
delay_2022 <- clean_names(delay_2022)

# note: I obtained these codes from the 'id' column in the `res` object above
delay_codes <- get_resource("3900e649-f31e-4b79-9f20-4731bbfd94f7")
delay_data_codebook <- get_resource("ca43ac3d-3940-4315-889b-a9375e7b8aa4")

## Removing the observations that have non-standardized lines

delay_2022 <- delay_2022 |> filter(line %in% c("BD", "YU", "SHP", "SRT"))


delay_2022 <- delay_2022 |> 
  left_join(delay_codes |> rename(code = `SUB RMENU CODE`, code_desc = `CODE DESCRIPTION...3`) |> select(code, code_desc)) 


delay_2022 <- delay_2022 |>
  mutate(code_srt = ifelse(line=="SRT", code, "NA")) |> 
  left_join(delay_codes |> rename(code_srt = `SRT RMENU CODE`, code_desc_srt = `CODE DESCRIPTION...7`) |> select(code_srt, code_desc_srt))  |> 
  mutate(code = ifelse(code_srt=="NA", code, code_srt),
         code_desc = ifelse(is.na(code_desc_srt), code_desc, code_desc_srt)) |> 
  select(-code_srt, -code_desc_srt)

delay_2022 <- delay_2022 |> 
  mutate(station_clean = ifelse(str_starts(station, "ST"), word(station, 1,2), word(station, 1)))

delay_2022 <- delay_2022 |> 
  mutate(code_red = case_when(
    str_starts(code_desc, "No") ~ word(code_desc, 1, 2),
    str_starts(code_desc, "Operator") ~ word(code_desc, 1,2),
    TRUE ~ word(code_desc,1))
         )
```


# Lab Exercises

To be handed in via submission of quarto file (and rendered pdf) to GitHub.

1.  Using the `delay_2022` data, plot the five stations with the highest mean delays. Facet the graph by `line`

```{r}
delay_2022 |>
  group_by(line, station) |>
  summarise(mean_delay = mean(min_delay)) |>
  arrange(-mean_delay) |>
  slice(1:5) |>
  ggplot(aes(x = station,
             y = mean_delay)) +
  geom_col() + 
  facet_wrap(vars(line), 
             scales = "free_y",
             nrow = 4) +
  coord_flip()
```

2.  Using the `opendatatoronto` package, download the data on mayoral campaign contributions for 2014. Hints:
    -   find the ID code you need for the package you need by searching for 'campaign' in the `all_data` tibble above
    -   you will then need to `list_package_resources` to get ID for the data file
    -   note: the 2014 file you will get from `get_resource` has a bunch of different campaign contributions, so just keep the data that relates to the Mayor election

```{r}
cam <- list_package_resources("f6651a40-2f52-46fc-9e04-b760c16edd5c") # obtained code from searching data frame above
#res <- res |> mutate(year = str_extract(name, "202.?"))
#delay_2022_ids <- res |> filter(year==2022) |> select(id) |> pull()

camp_2014_1 <- get_resource("5b230e92-0a22-4a15-9572-0b19cc222985")
```

```{r}
camp_2014 <- camp_2014_1[[2]]
names(camp_2014) <- camp_2014[1,]
camp_2014 <- camp_2014[-1,]

camp_2014 |>
  slice_head(n = 5)
```

3.  Clean up the data format (fixing the parsing issue and standardizing the column names using `janitor`)

```{r}
camp_2014 <- clean_names(camp_2014)


camp_2014 |>
  slice_head(n = 5)
```

4.  Summarize the variables in the dataset. Are there missing values, and if so, should we be worried about them? Is every variable in the format it should be? If not, create new variable(s) that are in the right format.

    ```{r}
    skim(camp_2014)
    ```

-   contributors_address, goods_or_service_desc, relationship_to_candidate, president_business_manager, authorized_representative and ward are almost all missing. I think whether we should be worried about the missing data depends on what the data will be used for. After taking a look at the goal of the lab and the questions below, I think we don't need to worry about the missing values.

-   Besides, for values like relationship_to_candidate, I think it is natural for missing values to occur (having no relationship), although we can assign a specific string to represent having no relationship instead of NA.

-   Contribution_amount should be in numeric format instead.

```{r}
camp_2014 <- camp_2014 |>
  mutate(num_contribution_amount = as.numeric(contribution_amount))
```

5.  Visually explore the distribution of values of the contributions. What contributions are notable outliers? Do they share a similar characteristic(s)? It may be useful to plot the distribution of contributions without these outliers to get a better sense of the majority of the data.

```{r}
ggplot(data = camp_2014) +
  geom_histogram(aes(x = num_contribution_amount)) +
  labs(title = 'contribution distribution',
       x = 'contribution amount') 
```

-   Looks like there is some very large outliers, trying log scale:

```{r}
ggplot(data = camp_2014) +
  geom_histogram(aes(x = num_contribution_amount)) +
  scale_x_log10() +
  labs(title = 'log contribution distribution',
       x = 'log contribution amount') 
```

-   Found some outliers, now find them in the dataset:

```{r}
camp_2014 |>
  arrange(-num_contribution_amount) |>
  slice_head(n=20)
```

-   I don't know much about how the mayoral campaign works, but it appears that the outliers are that candidates contributes to themselves.

-   Remove the outliers by removing the cases where candidates contributes to themselves. This will remove a few more rows other than the outliers, but I think it is fair to remove all of them, because otherwise the remaining self-contributions cases in the dataset will be biased toward small values.

```{r}
camp_2014 |>
  filter(relationship_to_candidate != "Candidate" | is.na(relationship_to_candidate)) |>
  ggplot() +
  geom_histogram(aes(x = num_contribution_amount)) +
  labs(title = 'contribution distribution',
       x = 'contribution amount') 
```

```{r}
camp_2014 |>
  filter(relationship_to_candidate != "Candidate" | is.na(relationship_to_candidate)) |>
  ggplot() +
  geom_histogram(aes(x = num_contribution_amount)) +
  scale_x_log10() +
  labs(title = 'log contribution distribution',
       x = 'log contribution amount') 
```

-   The majority of the contributions amount is between 100 to 1000.

6.  List the top five candidates in each of these categories:

    -   total contributions
    -   mean contribution
    -   number of contributions

```{r}
camp_2014 |>
  group_by(candidate) |>
  summarise(total_contributions = sum(num_contribution_amount)) |>
  arrange(-total_contributions) |>
  slice_head(n = 5)
```

```{r}
camp_2014 |>
  group_by(candidate) |>
  summarise(mean_contributions = mean(num_contribution_amount)) |>
  arrange(-mean_contributions) |>
  slice_head(n = 5)
```

```{r}
camp_2014 |>
  group_by(candidate) |>
  summarise(number_of_contributions = n()) |>
  arrange(-number_of_contributions) |>
  slice_head(n = 5)
```

7.  Repeat 6 but without contributions from the candidates themselves.

```{r}
camp_2014 |>
  filter(relationship_to_candidate != "Candidate" | is.na(relationship_to_candidate)) |>
  group_by(candidate) |>
  summarise(total_contributions = sum(num_contribution_amount)) |>
  arrange(-total_contributions) |>
  slice_head(n = 5)
```

```{r}
camp_2014 |>
  filter(relationship_to_candidate != "Candidate" | is.na(relationship_to_candidate)) |>
  group_by(candidate) |>
  summarise(mean_contributions = mean(num_contribution_amount)) |>
  arrange(-mean_contributions) |>
  slice_head(n = 5)
```

```{r}
camp_2014 |>
  filter(relationship_to_candidate != "Candidate" | is.na(relationship_to_candidate)) |>
  group_by(candidate) |>
  summarise(number_of_contributions = n()) |>
  arrange(-number_of_contributions) |>
  slice_head(n = 5)
```

8.  How many contributors gave money to more than one candidate?

```{r}
camp_2014 |>
  group_by(contributors_name) |>
  summarise(num_candidate_contributed = n_distinct(candidate)) |>
  filter(num_candidate_contributed > 1) |>
  nrow()
```

-   184 contributors gave money to more than one candidate.
