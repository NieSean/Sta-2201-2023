---
title: "Week 6: Visualizing the Bayesian Workflow"
date: today
date-format: "DD/MM/YY"
format: pdf
execute: 
  warning: false
  message: false
---

# Introduction

This lab will be looking at trying to replicate some of the visualizations in the lecture notes, involving prior and posterior predictive checks, and LOO model comparisons.

The dataset is a 0.1% of all births in the US in 2017. I've pulled out a few different variables, but as in the lecture, we'll just focus on birth weight and gestational age.

# The data

Read it in, along with all our packages.

```{r}
library(tidyverse)
library(here)
# for bayes stuff
library(rstan)
library(bayesplot) 
library(loo) 
library(tidybayes) 
```

```{r}

ds <- read_rds(here("data","births_2017_sample.RDS"))
head(ds)
```

Brief overview of variables:

-   `mager` mum's age
-   `mracehisp` mum's race/ethnicity see here for codes: https://data.nber.org/natality/2017/natl2017.pdf page 15
-   `meduc` mum's education see here for codes: https://data.nber.org/natality/2017/natl2017.pdf page 16
-   `bmi` mum's bmi
-   `sex` baby's sex
-   `combgest` gestational age in weeks
-   `dbwt` birth weight in kg
-   `ilive` alive at time of report y/n/ unsure

I'm going to rename some variables, remove any observations with missing gestational age or birth weight, restrict just to babies that were alive, and make a preterm variable.

```{r}
ds <- ds %>% 
  rename(birthweight = dbwt, gest = combgest) %>% 
  mutate(preterm = ifelse(gest<32, "Y", "N")) %>% 
  filter(ilive=="Y",gest< 99, birthweight<9.999)
```

## Question 1

Use plots or tables to show three interesting observations about the data. Remember:

-   Explain what your graph/ tables show
-   Choose a graph type that's appropriate to the data type
-   If you use `geom_smooth`, please also plot the underlying data

Feel free to replicate one of the scatter plots in the lectures as one of the interesting observations, as those form the basis of our models.

```{r}
ds |>
  ggplot(aes(x = gest, y = birthweight, color = preterm)) +
  geom_point(size = 1, alpha = 0.6) +
  theme_bw() + 
  ggtitle('Figure 1.1 Weight v gestational age') +
  labs(x = 'gest', y = 'birthweight', color = 'Preterm') +
  scale_color_discrete(labels = c('No', 'Yes')) +
  scale_x_log10() +
  scale_y_log10() + 
  geom_smooth(method='lm', formula= y~x)
```

-   This is the replication of the class plot. We see from the plot that the relationship between birth weight and gest are steeper for preterm babies, and flatter for non-preterm babies.

```{r}
ds |>
  ggplot(aes(x = meduc, y = mager, color = as.factor(mracehisp))) +
  geom_point(size = 1, alpha = 0.5,position=position_jitter(h=0.1, w=0.25)) +
  theme_bw() + 
  ggtitle('Figure 1.2 mother age v mother education') +
  labs(x = 'mother education', y = 'mother age', color = 'mothers\' race/ethnicity')
```

- This shows that mothers age and education has some level of collinearity, and their distributions are also impacted by mothers race/ethnicity.

```{r}
ds |>
  ggplot(aes(x = mracehisp, y = birthweight, fill = factor(mracehisp))) +
  geom_boxplot() +
  theme_bw() + 
  ggtitle('Figure 1.3 baby birthweight v mothers\' race/ethnicity') +
  labs(x = 'mothers\' race/ethnicity', y = 'baby birthweight')
```

- While some race/ethnicity have similar babies' birth weight, for some other race/ethnicity the birth weight difference can be significant depends on the sample size.

# The model

As in lecture, we will look at two candidate models

Model 1 has log birth weight as a function of log gestational age

$$
\log(y_i) \sim N(\beta_1 + \beta_2\log(x_i), \sigma^2)
$$

Model 2 has an interaction term between gestation and prematurity

$$
\log(y_i) \sim N(\beta_1 + \beta_2\log(x_i) + \beta_3 z_i + \beta_4\log(x_i) z_i, \sigma^2)
$$

-   $y_i$ is weight in kg
-   $x_i$ is gestational age in weeks, CENTERED AND STANDARDIZED
-   $z_i$ is preterm (0 or 1, if gestational age is less than 32 weeks)

# Prior predictive checks

Let's put some weakly informative priors on all parameters i.e. for the $\beta$s

$$
\beta \sim N(0, 1)
$$

and for $\sigma$

$$
\sigma \sim N^+(0,1)
$$ where the plus means positive values only i.e. Half Normal.

Let's check to see what the resulting distribution of birth weights look like given Model 1 and the priors specified above, assuming we had no data on birth weight (but observations of gestational age).

## Question 2

For Model 1, simulate values of $\beta$s and $\sigma$ based on the priors above. Do 1000 simulations. Use these values to simulate (log) birth weights from the likelihood specified in Model 1, based on the set of observed gestational weights. **Remember the gestational weights should be centered and standardized**.

-   Plot the resulting distribution of simulated (log) birth weights.
-   Plot ten simulations of (log) birthweights against gestational age.

```{r}
set.seed(314159)

sdd_gest = (log(ds$gest) - mean(log(ds$gest)))/sd(log(ds$gest))

b0 = rnorm(1000,0,1)
b1 = rnorm(1000,0,1)
s = abs(rnorm(1000,0,1))

sim = rep(0,1000*length(sdd_gest))
interitor = 1

for (i in 1:1000) {
  for (x in sdd_gest) {
    sim[interitor] <- rnorm(1,b0[i]+b1[i]*x,s[i]^2)
    interitor = interitor + 1
  }
}
```

```{r}
ggplot(data.frame(sim), aes(x = sim)) +
  geom_histogram(aes(y = after_stat(density))) +
  theme_bw() + 
  ggtitle('Figure 2.1 resulting distribution of simulated (log) birth weights')
```

```{r}
set.seed(314159)

sdd_gest = (log(ds$gest) - mean(log(ds$gest)))/sd(log(ds$gest))

b0 = rnorm(10,0,1)
b1 = rnorm(10,0,1)
s = abs(rnorm(10,0,1))

sim = rep(0,10*length(sdd_gest))
label = rep(0,10*length(sdd_gest))
iteritor = 1

for (i in 1:10) {
  for (x in sdd_gest) {
    sim[iteritor] <- rnorm(1,b0[i]+b1[i]*x,s[i]^2)
    label[iteritor] <- i
    iteritor = iteritor + 1
  }
}

sdd_gest = rep(sdd_gest, 10)

ggplot(data.frame(sim,sdd_gest, label), aes(x = sdd_gest, y = sim, color = as.factor(label))) +
  geom_point(size = 1, alpha = 0.5) +
  theme_bw() + 
  ggtitle('Figure 2.2 ten simulations of (log) birthweights against gestational age') +
  labs(x = 'gestational age', y = '(log) birthweights', color = 'label')
```

- I tried to fix the over plotting issue here, but was not very successful:

```{r}
set.seed(314159)

sdd_gest = (log(ds$gest) - mean(log(ds$gest)))/sd(log(ds$gest))

b0 = rnorm(10,0,1)
b1 = rnorm(10,0,1)
s = abs(rnorm(10,0,1))

sim = rep(0,10*length(sdd_gest))
label = rep(0,10*length(sdd_gest))
iteritor = 1

for (i in 1:10) {
  for (x in sdd_gest) {
    sim[iteritor] <- rnorm(1,b0[i]+b1[i]*x,s[i]^2)
    label[iteritor] <- i
    iteritor = iteritor + 1
  }
}

sdd_gest = rep(sdd_gest, 10)

samp <- sample(length(sdd_gest), 8000, prob = abs(sdd_gest-mean(sdd_gest))^2+0.1)

ggplot(data.frame(sim[samp],sdd_gest[samp],label[samp]), aes(x = sdd_gest[samp], y = sim[samp], color = as.factor(label[samp]))) +
  geom_point(size = 2, position=position_jitter(h=0.2, w=0.2),
             shape = 21, alpha = 0.3) +
  theme_bw() + 
  ggtitle('Figure 2.2 ten simulations of (log) birthweights against gestational age') +
  labs(x = 'gestational age', y = '(log) birthweights', color = 'label')
```

# Run the model

Now we're going to run Model 1 in Stan. The stan code is in the `code/models` folder.

First, get our data into right form for input into stan.

```{r}
ds$log_weight <- log(ds$birthweight)
ds$log_gest_c <- (log(ds$gest) - mean(log(ds$gest)))/sd(log(ds$gest))

# put into a list
stan_data <- list(N = nrow(ds),
                  log_weight = ds$log_weight,
                  log_gest = ds$log_gest_c)
```

Now fit the model

```{r}
mod1 <- stan(data = stan_data, 
             file = here("code/models/simple_weight.stan"),
             iter = 500,
             seed = 243)
```

```{r}
summary(mod1)$summary[c("beta[1]", "beta[2]", "sigma"),]
```

## Question 3

Based on model 1, give an estimate of the expected birth weight of a baby who was born at a gestational age of 37 weeks.

-   using mean as the estimate for betas, the estimated log weight will be: 1.1625 + 0.1436\*standardized\[log(37)\] = 1.077

-   so the estimated birth weight will be exp(1.077) = 2.936 kg.

```{r}
(log(37) - mean(log(ds$gest)))/sd(log(ds$gest)) * 0.1437529 + 1.1624783
```

```{r}
exp(1.077005)
```

## Question 4

Write a stan model to run Model 2, and run it.

```{r}
skimr::skim(ds)
```

```{r}
ds <- ds |>
      mutate(preterm = ifelse(preterm == "N",0,1))
```

```{r}
ds <- ds |>
      mutate(pt_log_g = preterm*log_gest_c)
```

```{r}
stan_data <- list(N = nrow(ds),
                  log_weight = ds$log_weight,
                  log_gest = ds$log_gest_c,
                  preterm = ds$preterm,
                  pt_log_g = ds$pt_log_g)
```

Now fit the model

```{r}
mod2q4 <- stan(data = stan_data, 
             file = here("code/models/simple_weight_2.stan"),
             iter = 500,
             seed = 243)
```

```{r}
summary(mod2q4)$summary[c("beta[1]", "beta[2]", "beta[3]", "beta[4]", "sigma"),]
```

## Question 5

For reference I have uploaded some model 2 results. Check your results are similar.

```{r}
load(here("output", "mod2.Rda"))
summary(mod2)$summary[c(paste0("beta[", 1:4, "]"), "sigma"),]
```

- The results are similar.

# PPCs

Now we've run two candidate models let's do some posterior predictive checks. The `bayesplot` package has a lot of inbuilt graphing functions to do this. For example, let's plot the distribution of our data (y) against 100 different datasets drawn from the posterior predictive distribution:

```{r}
set.seed(1856)
y <- ds$log_weight
yrep1 <- extract(mod1)[["log_weight_rep"]]
yrep2 <- extract(mod2q4)[["log_weight_rep"]] 
dim(yrep1)
samp100 <- sample(nrow(yrep1), 100)
ppc_dens_overlay(y, yrep1[samp100, ])  + ggtitle("distribution of observed versus predicted birthweights")
```

## Question 6

Make a similar plot to the one above but for model 2, and **not** using the bayes plot in built function (i.e. do it yourself just with `geom_density`)

```{r}
require(reshape2)
yrep2_m <- melt(yrep2[samp100,])

ggplot() +
  geom_density(data = yrep2_m, aes(x = value, group = iterations), color = 'grey') +
  geom_density(aes(x = y)) + 
  ggtitle('distribution of observed versus predicted birthweights')
```

## Test statistics

We can also look at some summary statistics in the PPD versus the data, again either using `bayesplot` -- the function of interest is `ppc_stat` or `ppc_stat_grouped` -- or just doing it ourselves using ggplot.

E.g. medians by prematurity for Model 1

```{r}
ppc_stat_grouped(ds$log_weight, yrep1, group = ds$preterm, stat = 'median')
```

## Question 7

Use a test statistic of the proportion of births under 2.5kg. Calculate the test statistic for the data, and the posterior predictive samples for both models, and plot the comparison (one plot per model).

```{r}
sum(y < log(2.5))/length(y)
```
the test statistic for the data is about 0.081

```{r}
prop_25 <- function(log_wt) {
  temp_prop <- sum(log_wt < log(2.5))/length(log_wt)
  return(temp_prop)
}

ppc_stat(ds$log_weight, yrep1, stat = prop_25) + 
  ggtitle('model 1 proportion of births under 2.5kg')
ppc_stat(ds$log_weight, yrep2, stat = prop_25) + 
  ggtitle('model 2 proportion of births under 2.5kg')
```

# LOO

Finally let's calculate the LOO elpd for each model and compare. The first step of this is to get the point-wise log likelihood estimates from each model:

```{r}
loglik1 <- extract(mod1)[["log_lik"]]
loglik2 <- extract(mod2q4)[["log_lik"]]
```

And then we can use these in the `loo` function to get estimates for the elpd. Note the `save_psis = TRUE` argument saves the calculation for each simulated draw, which is needed for the LOO-PIT calculation below.

```{r}
loo1 <- loo(loglik1, save_psis = TRUE)
loo2 <- loo(loglik2, save_psis = TRUE)
```

Look at the output:

```{r}
loo1
loo2
```

Comparing the two models tells us Model 2 is better:

```{r}
loo_compare(loo1, loo2)
```

We can also compare the LOO-PIT of each of the models to standard uniforms. The both do pretty well.

```{r}
ppc_loo_pit_overlay(yrep = yrep1, y = y, lw = weights(loo1$psis_object))
ppc_loo_pit_overlay(yrep = yrep2, y = y, lw = weights(loo2$psis_object))
```

## Bonus question (not required)

Create your own PIT histogram "from scratch" for Model 2.

```{r}
prop <- rep(0,length(y))

for (i in 1:length(y)) {
  prop[i] = sum(y[i] <= yrep2[,i])/1000
}

ggplot(data = data.frame(prop), aes(x = prop)) +
  geom_histogram() +
  ggtitle('model 2 PIT histogram')
```

## Question 8

Based on the original dataset, choose one (or more) additional covariates to add to the linear regression model. Run the model in Stan, and compare with Model 2 above on at least 2 posterior predictive checks.

$$
\log(y_i) \sim N(\beta_1 + \beta_2\log(x_i) + \beta_3 z_i + \beta_4\log(x_i) z_i, \sigma^2) + \beta_5 w_i
$$

-   $y_i$ is weight in kg
-   $x_i$ is gestational age in weeks, CENTERED AND STANDARDIZED
-   $z_i$ is preterm (0 or 1, if gestational age is less than 32 weeks)
-   $w_i$ is mum's age

```{r}
stan_data <- list(N = nrow(ds),
                  log_weight = ds$log_weight,
                  log_gest = ds$log_gest_c,
                  preterm = ds$preterm,
                  pt_log_g = ds$pt_log_g,
                  age = ds$mager)
```

Now fit the model

```{r}
mod3 <- stan(data = stan_data, 
             file = here("code/models/simple_weight_3.stan"),
             iter = 500,
             seed = 243)
```

```{r}
set.seed(1856)
yrep3 <- extract(mod3)[["log_weight_rep"]]
ppc_dens_overlay(y, yrep2[samp100, ])  + ggtitle("model 2 distribution of observed versus predicted birthweights")
ppc_dens_overlay(y, yrep3[samp100, ])  + ggtitle("model 3 distribution of observed versus predicted birthweights")
```

- The ppc density check does not show any visable improvement of model3 comparing to model 2.

```{r}
ppc_loo_pit_overlay(yrep = yrep2, y = y, lw = weights(loo1$psis_object))+ ggtitle("model 2")
ppc_loo_pit_overlay(yrep = yrep3, y = y, lw = weights(loo2$psis_object))+ ggtitle("model 3")
```

- The ppc pit check shows that the pit for model 3 is flatter than model 2 and is more in line with uniform distributions, indicating some improvement of model 3.


